#queries

# insert
	save()
		model = Model(key=value, key=value...) #creates an instance of Model and assigns it to model
		model.save() # saves this instance to database

	OR combined in below
	create()
		model = Model.objects.create(key=value, key=value...) # creates an instance and saves to database + assigns to model


	#insertion with foreign keys

		#one to many
			for relational inserts
				insert record that is foreign key and assign it to a variabel
				create main entity where one of the key=value pair will have name of Fk field and the above variable as its value, save it

			for example 
				class and student
				before adding student we should have class, so

				class_variable = Class(name='HSC', ...)
				class_variable.save()
				student = Student(name='abc', class=class_variable)
				student.save()

		# many to many
			for relational inserts
				insert record that is foreign key and assign it to a variabels
				create main entity where one of the key=value pair will have name of Fk field and the above variable as its value, save it

			for example 
				subject and student
				before adding student we should have subject, so

				subject_variable = Subject(name='chemistry', ...)
				subject_variable.save()
				student = Student(name='abc', subject=subject_variable)
				student.save()

	# retrieve all objects of a model
		list = Model.objects.all() 
		with this slicing can be used

	# pk or id
		use pk as shortcut to refer to primary key of any model

# selects
	# use of slicing [m:n:step]
		to get object from range x to y (limit, offset)
		to get first x objects
		to get last x objects
		to do all above and reverse output

# where
	get() - 1 record
	filter() - list of records
	exclude() - to apply exclude condition
	use F('field_name') instead of a static value to match a DB field against a filed

# see field lookups ( column__lookup)
	lookups could also be relatedModelName__field__lookup, acting as a join	
	like to check year or month in date
		for e.g., DOB__year__gte=1990, DOB__month=1 # checks for DOB year greater than equal to 1990 and month of jan
	to check a value against a list etc
	to apply operatos like lte (less than or equal)

	etc...
	https://docs.djangoproject.com/en/dev/ref/models/querysets/#id4


# update
	retrieve using get or filter
	make changes
	call save() method


# chaining
	all methods that return queryset could be chained using . operator
	with this slicing can be used


# to manipulated objects related to the object use following on the main object
syntax = mainObject.relatedObject_sel.methods()
e.g., 
student, subject (m2n)
student1 = Student.object.get(pk=1)
student1_set.all() # returns all subject of student 1
student1_set.set() # sets relation with student 1
student1_set.clear() # clears all subject related to student 1
student1_set.remove() # clears specified subject's relation from student 1
student1_set.add() # adds existing subject to student 1
student1_set.create() # adds new subject to student 1

