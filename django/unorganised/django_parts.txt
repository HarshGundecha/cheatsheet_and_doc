//OUTDATES, latest-> gdrive/notes/cheatsheet_or_doc/django_doc.md
#terminologies
- app - standalone plugable module
	# an app acts as a package which can be shipped
- project - contains >=1 app
	# i.e, a peojct contains multiple plugable apps

#tools
	#basic
	- python manage.py <CommandName> # command to perform various tasks in django from CLI
		- (make an alias for "python manage.py <CommandName>" to shorten it to somwthing like "pym <CommandName>")
	- virtualenv(compulsorily to be used) - virtual python environment, do more R&D
	#advanced
	- selenium, automted interactive testing
	- continuous integration and develpment
	- Django LiveServerTestCase
	- coverage.py to identify dead code
	- how to serve static files in both development and deployement

#django_flow
	#project_setup
	- configure project by updating project's settings.py
		- register your apps in INSTALLED_APPS array
		- set TIME_ZONE according to needed country from "TZ database name" column from https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
		- set allowed hosting url(optional, set only if you want to use IP other than 127.0.0.1)
		- configure database in DATABASES array (if skipped, uses sqlite with default settings, fine for development but not for production)

	#models
	- models define the entities and its members (i.e database table and its attributes)
		- create model classes in models.py for each entity
			- class contains member variables that reflect table attributes
			- should have a __str__(self) method that returns string when an object is called
			- for e.g., if its student model(class) it might return name(attribute) of student of a particluar object

	#migrations
	- after defining models
		- create migrations
			- python manage.py makemigrations #command for generating migration files
		- apply migrations
			- python manage.py migrate #command for running migrations against database

	#url_mapping
	- configure urls mapping for url to view mapping by setting urlpatterns.py
		- setup app's namespace by setting app_name variable just above urlpattern array

	#admin_site
	- register for admin site
		- import model to register
		- admin.site.register(<ImportedModelName>)
			# registers the model so that it appears in admin site with default UI and controls
	- customise admin site(optional)
		- create a class of <ModelName>admin in admin.py, configure class by setting various built in variables as per requirement in it and pass the class instaed of ModelName as a agrument while registering
	- create admin/superuser from CLI(to reflect changes to model in admin site make sure latest migrations are applied)
		- python manage.py createsuperuser #command that launches CLI bases create admin wizard for accessing admin site

genericview - to ease display of listing of item and detail of single item and other thing
F() - to avoid race condition
reverse() - to reverse map, i.e map an url name to its actual url
views are also pluggable by using blocks like include a view in view by using html like tags
creating model and view tests and running them (REFER testing_guide.txt for howtos and whattos)
	- assert*(test_method, expected_output) #methods that does testing

#doubts/queries
- Question.object.create() vs Question(date/questionl)
- 