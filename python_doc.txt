**												- raise to operator
//												- quotient operator
"""some content						- this new line will be converted to \n when this string is used
some other content"""
variable=input('message')
print('message')
+													- for string concatenation
'ting tong'*2							- multiplies the string // produces 'ting tongting tong'
'5'+5											- error, need to cast manually
int('5')+5								- produces 10 // explicit casting
case sensitive
del variable_name					- deletes reference of from variable_name to value is deleted
supports shorthand operators like +=, -= etc
does not support ++ and -- operators
does not support && and || and ! operator instead uses and, or and not keyword
boolean values are True and False	-	notice that 1st character is capital
< and > also works on string to compare strings lexicographically
statements like if elif function etc must have : at the end before starting body of it
for e.g., 
if 1 > 10 : 
	print("big number")
elif 1 > 5 :							- notice the elif keyword! //used for "else if"
	print("medium number")
else:
	print("small number")
The following values are considered by the interpreter to mean false:
	False, None, 0, "", (), [], {}
it does short circuit evaluation // hence evaluating only the required conditions to enter a block
the and, or operator instead of returning True or False returns the Operand on which the operation was performed
Python's order of operations is the same as that of normal mathematics: parentheses first, then exponentiation, then multiplication/division, and then addition/subtraction.
list in python is similar to 0 bases indexed array in php // can hold multiple types of members
using print you can print whole list
we can also access string character by accessing their index
for e.g., str="hello"
print(str[0]) // produces h
: operator can be used inside [] to access range of values in an list or string
for e.g., 
num=[0,1,2,3,4]
print(num[2,4]) //produces [2,3] //notice that it starts at 1st index i.e, 2 and ends at 2nd index-1th position
//in short 1st range is included and 2nd range is excluded in output
Lists can be added and multiplied in the same way as strings with + and * operator
Lists and strings are similar in many ways - strings can be thought of as lists of characters that can't be changed.
in operator is used to check if an item exists in a list, returns boolean
for e.g., 
if 2 in nums:
	print("2 exists in nums")
The in operator is also used to determine whether or not a string is a substring of another string.
to invert the logic, i.e, to check if an item doesnt exist use not in front of expression using in
for e.g.,
print(not 5 in nums)
print(5 not in nums)
print(not 3 in nums)
print(3 not in nums)
nums.append(99)			- used to append an item at the end of the list
the len() return length of the list
print(len(nums))
the list.insert(index, item) methos inserts the item at the given index
the index < 0 or > length will result insertion at the given end i.e., front or end of list
max(list): Returns the list item with the maximum value
min(list): Returns the list item with minimum value
list.count(obj): Returns a count of how many times an item occurs in a list
list.remove(obj): Removes an object from a list
list.reverse(): Reverses objects in a list
The range function creates a sequential list of numbers.
numbers = list(range(10))
print(numbers) //produces [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
The call to list is necessary because range by itself creates a range object, and this must be converted to a list if you want to use it as one.
numbers = list(range(3))
print(numbers) //produces [0,1,2]
numbers = list(range(3, 8))
print(numbers) //produces [3,4,5,6,7]
range can have a third argument, which determines the interval of the sequence produced. This third argument must be an integer.
numbers = list(range(5, 20, 2))
print(numbers) //produces [5,7,9,11,13,15,17,19]
for num in nums: //iterate through nums, read only the item one by one in num, making changes to num wont affect items in nums
	prnt(num)
The for loop in Python is like the foreach loop in other languages.
another use
for i in range(5):
	print(i) //produces 0 1 2 3 4




#functions

def function_name(arg1,arg2): // how to declare function
	//some code here


Python doesn't have general purpose multiline comments, as do programming languages such as C.
docstring is used as documentation string 
generally used as documentation of a function
can be accessed by help(function_name)
or
print(function_name.__doc__) //will print only first docstring, subsequent ones will be ignored
docstring should be first thing in function if you want to have one
functions can be referenced just like variables refer a value, this lets us pass function as arg to other functions
for e.g.,
def multiply(x, y):
   return x * y
a = 4
b = 7
operation = multiply
print(operation(a, b))


#modules
import moduele_name
from module_name import something as anotherthing // rename while importing
from module_name import something, something_else	// import multiple parts from a module
for e.g., 
from math import pi


#exception handling
try:
  variable = 10
  print(variable + "hello")
  print(variable / 2)
except ZeroDivisionError:
  print("Divided by zero")
except (ValueError, TypeError):
  print("Error occurred")
finally:
  print("This code will run no matter what")

you can manually raise exception by calling
raise exception_name("error message")

see usage if with keyword

the function() that doesnt return anything explicitly, returns None implicitly


#dictionaries - similar to list but supports custom keys instead of zero based index, uses {key:value [,key:value....]} to initialise
ages = {"Dave": 24, "Mary": 42, "John": 58}
print(ages["Dave"])
you can directly add item to dictionary by doing dict[key]=value
same as in list, in and not in operator can be used to check if a key exist in a dictionary or not
if you access key by dictionary[key] syntax that doesnt exist, exception will thrown, so instead use dictionary.get(key), it does same but if key doesnt exist returns None by default
or you can paas 2nd argument that acts as default value when key doesnt exist

#tuples
Tuples are very similar to lists, except that they are immutable, cant be modified, zero based indexed, uses () to initialise
Tuples can be created without the parentheses, by just separating the values with commas.
my_tuple = "one", "two", "three"
print(my_tuple[0]) //produces - one


#list slices
retrieve part of list or string/similar to what we saw in range function
list[start_index:end_index:step_size] - returns new list starting with start_index to end_index-1th element and every strp_size'th item 
list[:end_index:step_size] - returns new list starting with 0th to end_index-1th element
list[start_index::step_size] - returns new list starting with start_index to end of list
the indexes could hold negative value, in that case it returns items skipping those items from corresponding end
If a negative value is used for the step, the slice is done backwards.
Using [::-1] as a slice is a common and idiomatic way to reverse a list.

#list comprehensions
cubes = [i**3 for i in range(5)]
print(cubes) // produces [0, 1, 8, 27, 64]

evens=[i**2 for i in range(10) if i**2 % 2 == 0]
print(evens) // produces [0, 4, 16, 36, 64]


#string formatting
strings are immutable in python
nums = [4, 5, 6]
msg = "Numbers: {0} {1} {2}". format(nums[0], nums[1], nums[2])
print(msg) // produces Numbers: 4 5 6


String formatting can also be done with named arguments.
a = "{x}, {y}".format(x=5, y=12)
print(a) // produces 5, 12

print(", ".join(["spam", "eggs", "ham"])) // produces "spam, eggs, ham"
print("Hello ME".replace("ME", "world")) // produces "Hello world"
print("This is a sentence.".startswith("This")) // produces "True"
print("This is a sentence.".endswith("sentence.")) // produces "True"
print("This is a sentence.".upper()) // produces "THIS IS A SENTENCE."
print("AN ALL CAPS SENTENCE".lower()) // produces "an all caps sentence"
print("spam, eggs, ham".split(", ")) // produces "['spam', 'eggs', 'ham']"

#raws tring
string starting with r"some text" are called raw string
'raw string' means it is stored as it appears. For example, '\' is just a backslash instead of an escaping.



#numeric functions
print(min(1, 2, 3, 4, 0, 2, 1))
print(max([1, 4, 9, 2, 5, 6, 8]))
print(abs(-99))
print(abs(42))
print(sum([1, 2, 3, 4, 5]))

#list function
nums = [55, 44, 33, 22, 11]
if all([i > 5 for i in nums]):
   print("All numbers are larger than 5")
if any([i % 2 == 0 for i in nums]):
   print("At least one number is even")
for v in enumerate(nums):
   print(v)	//v holds both key and value


#functional programming
A key part of functional programming is higher-order functions.
Higher-order functions take other functions as arguments, or return them as results.
def apply_twice(func, arg):
  return func(func(arg))
def add_five(x):
  return x + 5
print(apply_twice(add_five, 10)) //produces 20
-pure function - doesnt change state of application, returns value based on parameter, preferred

some_list = []
def impure(arg):
  some_list.append(arg)
The function above is not pure, because it changed the state of some_list(not preferred)

#lambdas - anonymous functions, holds no reference generally and that is why are called anonymous
if lambda assigned to variables they will be similar to functions
but lambdas can generally have only one expression
def my_func(f, arg):
  return f(arg)
my_func(lambda x: 2*x*x, 5)
where
	x is parameter to lambda and
	2*x*x is what it returns
creating and calling lambda
	- (lambda x:x**x)(3) // produces 27

#map
The function map takes a function and an iterable as arguments, and returns a new iterable with the function applied to each argument. 
nums = [11, 22, 33, 44, 55]
result = list(map(lambda x:x+5, nums)) // appplies lambda to each item in nums and converts it into list
print(result) // produces [16, 27, 38, 49, 60]

OR

def add_five(x):
  return x + 5
nums = [11, 22, 33, 44, 55]
result = list(map(add_five, nums))
print(result) // produces [16, 27, 38, 49, 60]

#filter
The function filter filters an iterable by removing items that don't match a predicate (a function that returns a Boolean). 
nums = [11, 22, 33, 44, 55]
res = list(filter(lambda x: x%2==0, nums)) // only those items from nums that satisfy given condition makes it to the result set
print(res) // produces [22, 44]

#generator and yield
as generatos yield one value at a time, it doesnt hog memory that a normal function building a large list would do, so generators could run infinitely or memory friendly manner 
Using generators results in improved performance, which is the result of the lazy (on demand) generation of values, which translates to lower memory usage. Furthermore, we do not need to wait until all the elements have been generated before we start to use them.
The yield statement is used to define a generator, replacing the return of a function to provide a result to its caller without destroying local variables.

#Decorators // not yet clear
Decorators provide a way to modify functions using other functions. 
This is ideal when you need to extend the functionality of functions that you don't want to modify.
Example:
def decor(func):
  def wrap():
    print("============")
    func()
    print("============")
  return wrap

def print_text():
  print("Hello world!")
decorated = decor(print_text)
decorated()

#there also something like @decor functions whose doc is not listed here

#in-built DS comparision
	#Notations
	- V - value
	- K - key
	- I - index


	#Data Structures
	- List				- uses [], mutable  , I-V based, sliced

	- Sets				-	uses {}, mutable  , V based  , un-sliced, no duplicate V)
	- supports set operations by following operators using syntax set1 operator set2
		- union									= |
		- intersection					= &
		- difference						= -
		- symmetric difference	= ^ (does |  -  &, (result of union) difference (result of intersection))

	- Dictionary	-	uses {}, mutable  , K-V based, un-sliced, no duplicate K

	- Tuples			-	uses (), immutable, I-V based, sliced   , can act as K for dictionary(due to immutability)


	#Deciding factor (in order of high-low priority)
	- type needed
		- I-V
		- K-V
		- V
	- mutability
	- duplication
	- sets and tuples faster than list

#itertools, doc not here, lookout for it somewhere
	- have functions to find permutations, products and other filtering
	- MUST read full doc


#OOP
# - all methods including constructor must have first argument as self in a class, 
# regardless of whether there are other parametres or the method doesnt access instance specific resources
class Animal:
	#all object will by default have eyes=2 unless changed at class level like Animal.eyes=4, if changes by object.eyes=9, changes for this specific object
	eyes = 2
	#constructor, notice "self"
	def __init__(self, color, legs): 
		self.color = color
		self.legs = legs
	def breath(self):
		print("breathing...")

felix = Animal("ginger", 4)
print(felix.color)
felix.breath()

#inheritance
class Cat(Animal):
	def purr(self):
		print('purr')
	def breath_and_purr(self):
		self.breath()
		self.purr()

katty = Cat("black", 4)
print(katty.color)
katty.breath()
katty.purr()
katty.breath_and_purr()

# super().method_name() #calls method_name() from parent class, can be used for constructors too

#Magic Methods, those that starts and ends with __, like below listed operator overloaing methods 
__sub__				- for -
__mul__				- for *
__truediv__		- for /
__floordiv__	- for //
__mod__				- for %
__pow__				- for **
__and__				- for &
__xor__				- for ^
__or__				- for |
__lt__				- for <
__le__				- for <=
__eq__				- for ==
__ne__				- for !=
__gt__				- for >
__ge__				- for >=
__len__				- for len()
__getitem__		- for indexing
__setitem__		- for assigning to indexed values
__delitem__		- for deleting indexed values
__iter__			- for iteration over objects (e.g., in for loops)
__contains__	- for in
#many more like __del__, __call__, __new__
#there are also __rmethod_name__ versions that does something which is not covered in this documentation //notice the r in the method name


# you can't prevent a member(method or variable) from being accessed by making it private, as there;s no true way of making memnbers private, all you can do is following
	# prepending member with _ makes it weakly private, still accessible as normal member just that those importing it will not get these member starting with _ but will get everything else
	# prepending member with __ makes it strongly private, still accessible as normal member and can be accessed by _ClassName__MemberName instead of just __MemnerName


#classmethod
# to make a method class method that can change class state(class state not objects state)  
exact above delcaring the method,put @classmethod decorator and instead of self it takes cls as first parameter, below example
class some_class:
	...
	...
	@classmethod
	def class_mathod(cls, some_parameter):
		# some statements
called using ClassName.class_method

#staticmethod
# to make a method static that canNOT change class state and objects state  
exact above delcaring the method,put @staticmethod decorator and it takes neither of self or cls as first parameter, below example
class some_class:
	...
	...
	@saticmethod
	def static_mathod(some_parameter):
		# some statements
called using ClassName.static_method


#properties (this is about read only, getter only)
One common use of a property is to make an attribute read-only.
They are created by putting the property decorator above a method, which means when the instance attribute with the same name as the method is accessed, the method will be called instead. 

class Pizza:
	def __init__(self, toppings):
		self.toppings = toppings
  @property
  def pineapple_allowed(self):
    return False
pizza = Pizza(["cheese", "tomato"])
print(pizza.pineapple_allowed) //False
pizza.pineapple_allowed = True // AttributeError: can't set attribute

#properties (getter, setter)
- first you need to declare a function as the same name of attribute to be property and than let is pass the execution or call
- then you need to declare 2 methods for getter and setter using @method_name (the property name) with .getter and .setter as below

class Pizza:
	def __init__(self, toppings):
		self.toppings = toppings
		self._pineapple_allowed = False
	@property
	def pineapple_allowed(self):
		pass
	@pineapple_allowed.getter
	def pineapple_allowed(self):
		return self._pineapple_allowed
	@pineapple_allowed.setter
	def pineapple_allowed(self, value):
		self._pineapple_allowed=value
pizza = Pizza(["cheese", "tomato"])
print(pizza.pineapple_allowed) #//False
pizza.pineapple_allowed = True #// AttributeError: can't set attribute


